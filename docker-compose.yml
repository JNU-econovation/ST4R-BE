services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/templates/nginx.conf.template:ro
      - ./nginx/entrypoint.sh:/entrypoint.sh:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/www/certbot
      - ./ssl/private:/etc/nginx/private:ro    # 선택: 자체 키 저장
    env_file:
      - .env
    entrypoint: ["/entrypoint.sh"]
    depends_on:
      - spring
    networks:
      - my-network

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/www/certbot
    env_file:
      - .env
    entrypoint:
      - sh
      - -c
      - |
        # 최초 발급: live 디렉토리가 없으면 실행
        if [ ! -d "/etc/letsencrypt/live/${BACKEND_SERVER_NAME}" ]; then
          certbot certonly \
            --webroot -w /var/www/certbot \
            --email "${LETSENCRYPT_EMAIL}" \
            --agree-tos \
            --no-eff-email \
            --non-interactive \
            -d "${BACKEND_SERVER_NAME}"
        fi
        # 갱신 루프: 12시간마다
        while true; do
          certbot renew \
            --webroot -w /var/www/certbot \
            --non-interactive
          sleep 12h
        done
    networks:
      - my-network

  spring:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        JAR_FILE: build/libs/star-0.0.1-SNAPSHOT.jar
    container_name: spring
    depends_on:
      - redis
      - mysql
    networks:
      - my-network
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=prod

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - ${SPRING_REDIS_PORT}:${SPRING_REDIS_PORT}
    networks:
      - my-network

  mysql:
    image: mysql:8.4.5
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - my-network

volumes:
  certbot-etc:
    name: certbot-etc
  certbot-var:
    name: certbot-var
  mysql_data:
    name: mysql_data


networks:
  my-network:
    name: my-network
    driver: bridge